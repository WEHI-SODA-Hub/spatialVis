---
title: "Segmentation Report"
format:
    html:
        code-fold: true
        code-tools: true
params:
    sample_name: "sample"
    geojson_file: "inst/extdata/test_segmentations.geojson"
---

```{r setup, include=FALSE}
library(devtools)
if (!requireNamespace("spatialVis", quietly = TRUE)) {
    devtools::install_github("WEHI-SODA-Hub/spatialVis")
}
library(spatialVis)
```

```{r parse_args}
sample_name <- params$sample_name
geojson_file <- params$geojson_file

stopifnot(file.exists(geojson_file))
```

# `r sample_name`

```{r, show_params}
params_table <- data.frame(
    Parameter = c("Sample name", "GeoJSON file"),
    Value = c(
        sample_name,
        geojson_file
    )
)

knitr::kable(params_table, format = "markdown", col.names = c("Parameter", "Value"))
```

## Segmentation summary statistics

```{r, segmentation_stats}
measurement_data <- get_segmentation_measurements(geojson_file)

object_count <- table(measurement_data$objectType) |> data.frame()
colnames(object_count) <- c("Object", "Count")
knitr::kable(object_count, format = "markdown")

if (ncol(measurement_data) > 1) {
  summary_table <- summarise_segmentation_stats(measurement_data)
  knitr::kable(summary_table, format = "markdown")
}
```

## Plot compartment measurements

```{r, compartment_measurements}
if (ncol(measurement_data) > 1) {
  plot_compartment_measurements(measurement_data)
}
```

## Plot Nucleus/Cell ratio

```{r}
measurement <- "Nucleus/Cell area ratio"
col_idx <- which(stringr::str_detect(colnames(measurement_data),
                                     stringr::fixed(measurement)))
if (length(col_idx) > 0) {
  df <- data.frame(measurement = measurement,
                   value = measurement_data[[col_idx]])
  ggplot2::ggplot(data = df, ggplot2::aes(x = measurement, y = value)) +
    ggplot2::geom_violin(adjust = 2) +
    ggplot2::geom_jitter(width = 0.1, alpha = 0.6, size = 0.5) +
    ggplot2::facet_wrap(~ measurement, scales = "free_y") +
    ggplot2::ggtitle(measurement) +
    ggplot2::theme(axis.title.y = ggplot2::element_blank(),
                   axis.text.x = ggplot2::element_text(angle = 90, hjust = 1),
                   axis.title.x = ggplot2::element_blank(),
                   strip.text.y = ggplot2::element_blank(),
                   panel.background = ggplot2::element_blank())
}
```

## Channel intensities

```{r, channel_intensities}
if (ncol(measurement_data) > 1) {
  plot_intensity_measurements(measurement_data)
}
```
